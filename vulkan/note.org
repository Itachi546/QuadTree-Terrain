* Vulkan API
** Renderpass
*** Attachments (Color, Depth)
** Framebuffer
*** Renderpass
*** Image(Attachment)
*** Width, Height
** CommandBuffer
** Pipeline
*** Shader(vs, fs, gs, cs)
*** Renderpass
*** viewport, cullstate, scissor, rasterizationState, blendState
** PipelineLayout
*** DescriptorSetLayout
*** PushConstants
** Swapchain
*** Framebuffer
*** Attachments(depth, color)
** Image
** Buffer


* Render Process
  - acquire image (swapchain, semaphore)
  - reset command pool (context)
  - beginCommandBuffer (context)
  - maybe some barrier (context)
  - begin renderpass (framebuffer, renderpass, width, height) (context)
  - bind pipeline (context)
  - bind buffers(vertex, index) (context)
  - draw triangle (contex)
  - submitCommandBuffer (context)
  - present queue (context)


* Required API
  Pipeline trianglePipeline(shader, drawmode ...)
  Renderpass/Framebuffer

  swapchain->get_next_image();
  context->begin();(reset command pool, beginCommandBuffer)
  context->set_renderpass(); (begin renderpass, framebuffer)
  context->set_pipeline(); (bind pipeline)
  context->bind_vertex_buffer();
  context->bind_index_buffer();
  context->draw_triangle();
  context->end();
  swapchain->present();(give some image to me)
 
  
* Required Class
** RenderPass
** Context
** Pipeline
** VertexBuffer
** IndexBuffer
** UniformBuffer
** Device (create, destroy)
** Swapchain

* Remaining
** Shader Reflection
   ** Added attribute reflection
   ** Added descriptor(Uniform Buffer) and push constants reflection
** GLSL to SPIRV
** DebugDraw (Line, Point, Cube, Sphere, Box)
   ** Added line and point
** Timer
** ImGui Integration

** Mesh (abstraction over buffers)
** Scene (manage mesh)
** ECS or SceneGraph 
** Improved Logger
** Engine Class (initialization and storage of global variables and static class)

* Outline Shader
** Draw selected object in new framebuffer with alpha channel(disable depth and lighting)
** Draw scene
** Draw fullscreen quad with the image


* Heightmap Terrain
*** ChunkManager (Pool of Chunk, finding new available chunk)
*** QuadTree (get the chunk, fill the chunk(possibly), render the chunk)
*** How to unload chunk?
    Give each chunk and id, binary encoded id generated for quadtree, 
    Node are stored in array based on the id
    Give age to each chunk
    When age is old remove it and set the node value to node in array as nullptrx

