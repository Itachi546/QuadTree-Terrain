#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive   : require

#include "../shader_constants.h"
#include "cubemap.glsl"

#define LOCAL_SIZE 8
layout(local_size_x = LOCAL_SIZE, local_size_y = LOCAL_SIZE, local_size_z = 1) in;

layout(binding = 0, rgba16f) uniform readonly imageCube u_cubeMap;
layout(binding = 1, rgba16f) uniform writeonly imageCube u_diffuseIrradiance;
layout(binding = 2) uniform Matrices
{
   mat4 u_invViews[6];
   mat4 u_invProjection;
};

layout(push_constant) uniform Data
{
    int cubemapDims;
    int numStep;
};

vec3 generate_direction(vec2 uv, int index)
{
    vec4 d = vec4(uv, 0.0, 0.0);
    d = u_invProjection * d;
    d.z = -1.0f, d.w = 0.0f;

    vec3 worldSpace = vec3(u_invViews[index] * d);
    return normalize(worldSpace);
}


void main() 
{
    ivec3 cubeCoord = ivec3(gl_GlobalInvocationID.xyz);
	vec2 dims = vec2(cubemapDims);
    vec2 uv = vec2(cubeCoord.xy) / dims;

	vec3 normal = generate_direction(uv * 2.0f - 1.0f, cubeCoord.z); 
	vec3 right  = normalize(cross(vec3(0.0, 1.0, 0.0), normal));
	vec3 up     = cross(normal, right);

	float stepTheta = PI_2 / float(numStep);
	float stepPhi = PI2 / float(numStep);

	int totalSample = 0;
	vec3 irradiance = vec3(0.0f);
	for(float theta = 0.0; theta < PI_2; theta += stepTheta)
	{
    	float sinTheta = sin(theta);
	    float cosTheta = cos(theta);
		for(float phi =	0.0; phi < PI2; phi += stepPhi)
		{
    		float cosPhi = cos(phi);
			vec3 tangentSample = vec3(sinTheta * cosPhi, sinTheta *	sin(phi), cosTheta);
			vec3 sampleVec = tangentSample.x * right + tangentSample.y * up	+ tangentSample.z *	normal;
			irradiance += imageLoad(u_cubeMap, texCoordToCube(sampleVec, dims)).rgb	* cosTheta * sinTheta;
			totalSample	++;
	   }
	}
	irradiance = (PI * irradiance) / float(totalSample);
	imageStore(u_diffuseIrradiance, cubeCoord, vec4(irradiance, 1.0f));
}
