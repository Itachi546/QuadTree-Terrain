#version 450
#define PI 3.1415926535897932384626433832795
#define PI2 2.0 * PI

layout(local_size_x = 1, local_size_y = 16) in;


layout(binding = 0, rgba32f) uniform writeonly image2D butterflyTexture;
layout(std430, binding = 1) buffer indices
{
   int j[];
} bit_reversed;

layout(push_constant) uniform block
{
    int N;
};

struct complex
{
    float r;
    float i;
};

void main()
{ 
    vec2 uv = gl_GlobalInvocationID.xy;
    float k = mod((uv.y * N) / pow(2, uv.x + 1), N);

    float theta = PI2 * (k / float(N));
    complex twiddleFactor = complex(cos(theta), sin(theta));

    int butterflySpan = int(pow(2, uv.x));

    int butterflyWing = 0;
    if(mod(pow(2, uv.x + 1), uv.y) < butterflySpan)
       butterflyWing = 1;

    // For first stage the indices are bit reversed indices
    int index = int(uv.y);
    vec4 result = vec4(twiddleFactor.r, twiddleFactor.i, 0.0f, 0.0f);
    if(uv.x == 0)
    {
     	//First	stage
        if(butterflyWing == 1) // Top wing
    		result.zw =	vec2(bit_reversed.j[index],  bit_reversed.j[index + 1]);
        else // Bottom Wing
    		result.zw =	vec2(bit_reversed.j[index -	1],	bit_reversed.j[index]);
    }
    else
    {
       // Rest of the stage
       if(butterflyWing == 1)
	       result.zw = vec2(uv.y, uv.y + butterflySpan);
       else
           result.zw = vec2(uv.y - butterflySpan, uv.y);
    }
	imageStore(butterflyTexture, ivec2(uv), result);
}