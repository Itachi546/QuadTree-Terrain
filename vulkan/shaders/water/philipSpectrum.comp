#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;

layout (binding = 0, r32f) uniform readonly image2D noise0;
layout (binding = 1, r32f) uniform readonly image2D noise1;
layout (binding = 2, r32f) uniform readonly image2D noise2;
layout (binding = 3, r32f) uniform readonly image2D noise3;

layout(binding = 4, rg32f) uniform writeonly image2D h0TildeK;
layout(binding = 5, rg32f) uniform writeonly image2D h0TildeMinusK;

#define PI 3.1415926535897932384626433832795
#define PI2 2.0 * PI
const float g = 9.81f;

layout(push_constant) uniform block
{
   int u_N;
   int u_L;

   vec2 u_windDirection;
   float u_windSpeed;
   float u_philipAmplitude;
};



float philips_power_spectrum(vec2 k, float k_mag, float k_mag_sqr, float L_philips, float suppression)
{
    return (u_philipAmplitude * (exp(-1.0 / (k_mag_sqr * L_philips * L_philips))) * pow(dot(normalize(k), u_windDirection), 2.0)) / (k_mag_sqr * k_mag_sqr);
}

vec4 gauss_rnd()
{
    ivec2 texCoord = ivec2(gl_GlobalInvocationID.xy);

    float noise00 = clamp(imageLoad(noise0, texCoord).r, 0.001, 1.0);
    float noise01 = clamp(imageLoad(noise1, texCoord).r, 0.001, 1.0);
    float noise02 = clamp(imageLoad(noise2, texCoord).r, 0.001, 1.0);
    float noise03 = clamp(imageLoad(noise3, texCoord).r, 0.001, 1.0);

    float u0 = PI2 * noise00;
    float v0 = sqrt(-2.0 * log(noise01));
    float u1 = PI2 * noise02;
    float v1 = sqrt(-2.0 * log(noise03));
    vec4 rnd = vec4(v0 * cos(u0), v0 * sin(u0), v1 * cos(u1), v1 * sin(u1));

    return rnd;
}

void main()
{
    vec2  x         = vec2(gl_GlobalInvocationID.xy) - float(u_N) / 2.0;
    vec2  k         = vec2((2.0 * PI * float(x.x)) / float(u_L), (2.0 * PI * float(x.y)) / float(u_L));
    float L_philips = (u_windSpeed * u_windSpeed) / g;
    float k_mag     = length(k);

    if (k_mag < 0.00001)
        k_mag = 0.00001;

    float k_mag_sqr   = k_mag * k_mag;
    float suppression = 1.0f;

    float h0k      = clamp(sqrt(philips_power_spectrum(k, k_mag, k_mag_sqr, L_philips, suppression)) / sqrt(2.0), -4000.0, 4000.0);
    float h0minusk = clamp(sqrt(philips_power_spectrum(-k, k_mag, k_mag_sqr, L_philips, suppression)) / sqrt(2.0), -4000.0, 4000.0);

    vec4 rnd = gauss_rnd();
    imageStore(h0TildeK, ivec2(gl_GlobalInvocationID.xy), vec4(rnd.xy * h0k, 0.0, 1.0));
    imageStore(h0TildeMinusK, ivec2(gl_GlobalInvocationID.xy), vec4(rnd.zw * h0minusk, 0.0, 1.0));
}
