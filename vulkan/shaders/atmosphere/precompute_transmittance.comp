#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_GOOGLE_include_directive   : require

#define LOCAL_SIZE 32
layout(local_size_x = LOCAL_SIZE, local_size_y = LOCAL_SIZE, local_size_z = 1) in;

layout(binding = 0, rg32f)  uniform writeonly image2D transmittance;
layout(binding = 1) uniform AtmosphereParams
{
  vec3 BetaR;
  float	EARTH_RADIUS;

  vec3	BetaM;
  float	ATMOSPHERE_RADIUS;

  float	Hr;
  float	Hm;
  int TRANSMITTANCE_TEXTURE_DIM;
};


#include "../shader_constants.h"
/*
layout(push_constant) uniform AtmosphereParams
{
  vec3 BetaR;
  float	EARTH_RADIUS;

  vec3	BetaM;
  float	ATMOSPHERE_HEIGHT;

  float	Hr;
  float	Hm;
  int TRANSMITTANCE_TEXTURE_DIM;
};
*/
float intersectSphere(vec3 r0, vec3 rd, vec4 sph)
{
	vec3 rc = sph.xyz - r0;
	float radius2 = sph.w * sph.w;
	float tca = dot(rc, rd);
    //	if (tca < 0.) return;

	float d2 = dot(rc, rc) - tca * tca;
	if (d2 > radius2)
		return INF;

	float thc = sqrt(radius2 - d2);
	float t0 = tca - thc;
	float t1 = tca + thc;

	if (t0 < 0.) t0 = t1;
    return t0;
}

#define ATMOSPHERE vec4(0.0, 0.0, 0.0, ATMOSPHERE_RADIUS)
#define NUM_SAMPLES_CAMERA 32

vec4 calculate_transmittance(vec2 uv)
{
    float height = mix(EARTH_RADIUS, ATMOSPHERE_RADIUS, uv.y);
	float y	= -2.0 * uv.x + 1.0;
	float x = sin(acos(y));

	vec3 rd = vec3(x, y, 0.0);
    vec3 r0 = vec3(0.0, height, 0.0);
	float t = intersectSphere(r0, rd, ATMOSPHERE);

	float stepSize = t / float(NUM_SAMPLES_CAMERA);
	float opticalDepthR = 0.0;
	float opticalDepthM = 0.0;

	vec3 p = r0 + EPSILON * rd;
	vec3 pInc = stepSize * rd;

	for(int i = 0; i < NUM_SAMPLES_CAMERA; ++i)
	{
	   float h = length(p) - EARTH_RADIUS;
       opticalDepthR += exp(-h / Hr) * stepSize;	
       opticalDepthM += exp(-h / Hm) * stepSize;
	   p += pInc;
	}
	return vec4(opticalDepthR, opticalDepthM, 1.0f, 1.0f);
}

void main()
{
    vec2 uv = vec2(gl_GlobalInvocationID.xy);
    vec4 result = calculate_transmittance(uv / float(TRANSMITTANCE_TEXTURE_DIM));
    imageStore(transmittance, ivec2(uv), result);
}